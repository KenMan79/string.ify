"use strict";

function _objectValues(obj) {
    var values = [];
    var keys = Object.keys(obj);

    for (var k = 0; k < keys.length; ++k) values.push(obj[keys[k]]);

    return values;
}

function _objectEntries(obj) {
    var entries = [];
    var keys = Object.keys(obj);

    for (var k = 0; k < keys.length; ++k) entries.push([keys[k], obj[keys[k]]]);

    return entries;
}

const bullet = require('string.bullet'),
      isBrowser = typeof window !== 'undefined' && window.window === window && window.navigator,
      maxOf = (arr, pick) => arr.reduce((max, s) => Math.max(max, pick ? pick(s) : s), 0),
      isInteger = Number.isInteger || (value => typeof value === 'number' && isFinite(value) && Math.floor(value) === value),
      isTypedArray = x => x instanceof Float32Array || x instanceof Float64Array || x instanceof Int8Array || x instanceof Uint8Array || x instanceof Uint8ClampedArray || x instanceof Int16Array || x instanceof Int32Array || x instanceof Uint32Array;

const assignProps = (to, from) => {
    for (const prop in from) {
        Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
    };return to;
};

const escapeStr = x => x.replace(/\n/g, '\\n').replace(/\'/g, "\\'").replace(/\"/g, '\\"');

const configure = cfg => {

    const stringify = x => {

        const state = Object.assign({ parents: new Set(), siblings: new Map() }, cfg);

        if (cfg.pretty === 'auto') {
            const oneLine = stringify.configure({ pretty: false, siblings: new Map() })(x);
            return oneLine.length <= cfg.maxLength ? oneLine : stringify.configure({ pretty: true, siblings: new Map() })(x);
        }

        var customFormat = cfg.formatter && cfg.formatter(x, stringify);

        if (typeof customFormat === 'string') {
            return customFormat;
        }

        if (typeof jQuery !== 'undefined' && x instanceof jQuery) {
            x = x.toArray();
        } else if (isTypedArray(x)) {
            x = Array.from(x);
        }

        if (isBrowser && x === window) {
            return 'window';
        } else if (!isBrowser && typeof global !== 'undefined' && x === global) {
            return 'global';
        } else if (x === null) {
            return 'null';
        } else if (x instanceof Date) {
            return state.pure ? x.getTime() : "ðŸ“…  " + x.toString();
        } else if (x instanceof RegExp) {
            return state.json ? '"' + x.toString() + '"' : x.toString();
        } else if (state.parents.has(x)) {
            return state.pure ? undefined : '<cyclic>';
        } else if (!state.pure && state.siblings.has(x)) {
            return '<ref:' + state.siblings.get(x) + '>';
        } else if (x && typeof Symbol !== 'undefined' && (customFormat = x[Symbol.for('String.ify')]) && typeof customFormat === 'function' && typeof (customFormat = customFormat.call(x, stringify.configure(state))) === 'string') {

            return customFormat;
        } else if (x instanceof Function) {
            return cfg.pure ? x.toString() : x.name ? '<function:' + x.name + '>' : '<function>';
        } else if (typeof x === 'string') {
            return '"' + escapeStr(stringify.limit(x, cfg.pure ? Number.MAX_SAFE_INTEGER : cfg.maxStringLength)) + '"';
        } else if (x instanceof Promise && !state.pure) {
            return '<Promise>';
        } else if (typeof x === 'object') {

            state.parents.add(x);
            state.siblings.set(x, state.siblings.size);

            const result = stringify.configure(Object.assign({}, state, { pretty: state.pretty === false ? false : 'auto', depth: state.depth + 1 })).object(x);

            state.parents.delete(x);

            return result;
        } else if (typeof x === 'number' && !isInteger(x) && cfg.precision > 0) {
            return x.toFixed(cfg.precision);
        } else {
            return String(x);
        }
    };

    /*  API  */

    assignProps(stringify, {

        state: cfg,

        configure: newConfig => configure(Object.assign({}, cfg, newConfig)),

        /*  TODO: generalize generation of these chain-style .configure helpers (maybe in a separate library, as it looks like a common pattern)    */

        get pretty() {
            return stringify.configure({ pretty: true });
        },
        get noPretty() {
            return stringify.configure({ pretty: false });
        },

        get json() {
            return stringify.configure({ json: true, pure: true });
        },
        get pure() {
            return stringify.configure({ pure: true });
        },

        maxStringLength(n = Number.MAX_SAFE_INTEGER) {
            return stringify.configure({ maxStringLength: n });
        },
        maxArrayLength(n = Number.MAX_SAFE_INTEGER) {
            return stringify.configure({ maxArrayLength: n });
        },
        maxDepth(n = Number.MAX_SAFE_INTEGER) {
            return stringify.configure({ maxDepth: n });
        },
        maxLength(n = Number.MAX_SAFE_INTEGER) {
            return stringify.configure({ maxLength: n });
        },

        precision(p) {
            return stringify.configure({ precision: p });
        },
        formatter(f) {
            return stringify.configure({ formatter: f });
        },

        /*  Some undocumented internals    */

        limit: (s, n) => s && (s.length <= n ? s : s.substr(0, n - 1) + 'â€¦'),

        rightAlign: strings => {
            var max = maxOf(strings, s => s.length);
            return strings.map(s => ' '.repeat(max - s.length) + s);
        },

        object: x => {

            if (x instanceof Set) {
                x = Array.from(x.values());
            } else if (x instanceof Map) {
                x = Array.from(x.entries());
            }

            const isArray = Array.isArray(x);

            if (isBrowser) {

                if (x instanceof Element) {
                    return '<' + (x.tagName.toLowerCase() + (x.id && '#' + x.id || '') + (x.className && '.' + x.className || '')) + '>';
                } else if (x instanceof Text) {
                    return '@' + stringify.limit(x.wholeText, 20);
                }
            }

            if (!cfg.pure && (cfg.depth > cfg.maxDepth || isArray && x.length > cfg.maxArrayLength)) {
                return isArray ? '<array[' + x.length + ']>' : '<object>';
            }

            const pretty = cfg.pretty ? true : false,
                  entries = _objectEntries(x),
                  oneLine = !pretty || entries.length < 2,
                  quoteKey = cfg.json ? k => '"' + escapeStr(k) + '"' : k => /^[A-z][A-z0-9]*$/.test(k) ? k : "'" + escapeStr(k) + "'";

            if (pretty) {

                const values = _objectValues(x),
                      printedKeys = stringify.rightAlign(Object.keys(x).map(k => quoteKey(k) + ': ')),
                      printedValues = values.map(stringify),
                      leftPaddings = printedValues.map((x, i) => x[0] === '[' || x[0] === '{' ? 3 : typeof values[i] === 'string' ? 1 : 0),
                      maxLeftPadding = maxOf(leftPaddings),
                      items = leftPaddings.map((padding, i) => {
                    const value = ' '.repeat(maxLeftPadding - padding) + printedValues[i];
                    return isArray ? value : bullet(printedKeys[i], value);
                }),
                      printed = bullet(isArray ? '[ ' : '{ ', items.join(',\n')),
                      lines = printed.split('\n'),
                      lastLine = lines[lines.length - 1];

                return printed + (' '.repeat(maxOf(lines, l => l.length) - lastLine.length) + (isArray ? ' ]' : ' }'));
            } else {

                const items = entries.map(kv => (isArray ? '' : quoteKey(kv[0]) + ': ') + stringify(kv[1])),
                      content = items.join(', ');

                return isArray ? '[' + content + ']' : '{ ' + content + ' }';
            }
        }
    });

    return stringify;
};

module.exports = configure({

    depth: 0,
    pure: false,
    json: false,
    //  color:           false, // not supported yet
    maxDepth: 5,
    maxLength: 50,
    maxArrayLength: 60,
    maxStringLength: 60,
    precision: undefined,
    formatter: undefined,
    pretty: 'auto'
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QXhCOztBQThGQSxXQUFPLFNBQVA7QUFDSCxDQTdLTDs7QUErS0EsT0FBTyxPQUFQLEdBQWlCLFVBQVc7O0FBRVIsV0FBaUIsQ0FGVDtBQUdSLFVBQWlCLEtBSFQ7QUFJUixVQUFpQixLQUpUO0FBS1o7QUFDSSxjQUFpQixDQU5UO0FBT1IsZUFBaUIsRUFQVDtBQVFSLG9CQUFpQixFQVJUO0FBU1IscUJBQWlCLEVBVFQ7QUFVUixlQUFpQixTQVZUO0FBV1IsZUFBaUIsU0FYVDtBQVlSLFlBQWdCO0FBWlIsQ0FBWCxDQUFqQiIsImZpbGUiOiJzdHJpbmcuaWZ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IGJ1bGxldCAgICAgICA9IHJlcXVpcmUgKCdzdHJpbmcuYnVsbGV0JyksXG4gICAgICBpc0Jyb3dzZXIgICAgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpICYmICh3aW5kb3cud2luZG93ID09PSB3aW5kb3cpICYmIHdpbmRvdy5uYXZpZ2F0b3IsXG4gICAgICBtYXhPZiAgICAgICAgPSAoYXJyLCBwaWNrKSA9PiBhcnIucmVkdWNlICgobWF4LCBzKSA9PiBNYXRoLm1heCAobWF4LCBwaWNrID8gcGljayAocykgOiBzKSwgMCksXG4gICAgICBpc0ludGVnZXIgICAgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8ICh2YWx1ZSA9PiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgJiYgaXNGaW5pdGUgKHZhbHVlKSAmJiAoTWF0aC5mbG9vciAodmFsdWUpID09PSB2YWx1ZSkpLFxuICAgICAgaXNUeXBlZEFycmF5ID0geCA9PiAoeCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKHggaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICh4IGluc3RhbmNlb2YgSW50OEFycmF5KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoeCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICh4IGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICh4IGluc3RhbmNlb2YgSW50MTZBcnJheSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKHggaW5zdGFuY2VvZiBJbnQzMkFycmF5KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoeCBpbnN0YW5jZW9mIFVpbnQzMkFycmF5KVxuXG5jb25zdCBhc3NpZ25Qcm9wcyA9ICh0bywgZnJvbSkgPT4geyBmb3IgKGNvbnN0IHByb3AgaW4gZnJvbSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkgKHRvLCBwcm9wLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIChmcm9tLCBwcm9wKSkgfTsgcmV0dXJuIHRvIH1cblxuY29uc3QgZXNjYXBlU3RyID0geCA9PiB4LnJlcGxhY2UgKC9cXG4vZywgJ1xcXFxuJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlICgvXFwnL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlICgvXFxcIi9nLCAnXFxcXFwiJylcblxuY29uc3QgY29uZmlndXJlID0gY2ZnID0+IHtcblxuICAgIGNvbnN0IHN0cmluZ2lmeSA9IHggPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IE9iamVjdC5hc3NpZ24gKHsgcGFyZW50czogbmV3IFNldCAoKSwgc2libGluZ3M6IG5ldyBNYXAgKCkgfSwgY2ZnKVxuXG4gICAgICAgICAgICBpZiAoY2ZnLnByZXR0eSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgICBvbmVMaW5lID0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdpZnkuY29uZmlndXJlICh7IHByZXR0eTogZmFsc2UsIHNpYmxpbmdzOiBuZXcgTWFwICgpIH0pICh4KVxuICAgICAgICAgICAgICAgIHJldHVybiAob25lTGluZS5sZW5ndGggPD0gY2ZnLm1heExlbmd0aCkgPyBvbmVMaW5lIDogc3RyaW5naWZ5LmNvbmZpZ3VyZSAoeyBwcmV0dHk6IHRydWUsICBzaWJsaW5nczogbmV3IE1hcCAoKSB9KSAoeCkgfVxuXG4gICAgICAgICAgICB2YXIgY3VzdG9tRm9ybWF0ID0gY2ZnLmZvcm1hdHRlciAmJiBjZmcuZm9ybWF0dGVyICh4LCBzdHJpbmdpZnkpXG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY3VzdG9tRm9ybWF0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXN0b21Gb3JtYXQgfVxuXG4gICAgICAgICAgICBpZiAoKHR5cGVvZiBqUXVlcnkgIT09ICd1bmRlZmluZWQnKSAmJiAoeCBpbnN0YW5jZW9mIGpRdWVyeSkpIHtcbiAgICAgICAgICAgICAgICB4ID0geC50b0FycmF5ICgpIH1cblxuICAgICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZEFycmF5ICh4KSkge1xuICAgICAgICAgICAgICAgIHggPSBBcnJheS5mcm9tICh4KSB9XG5cbiAgICAgICAgICAgIGlmIChpc0Jyb3dzZXIgJiYgKHggPT09IHdpbmRvdykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3dpbmRvdycgfVxuXG4gICAgICAgICAgICBlbHNlIGlmICghaXNCcm93c2VyICYmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgJiYgKHggPT09IGdsb2JhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2dsb2JhbCcgfVxuXG4gICAgICAgICAgICBlbHNlIGlmICh4ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdudWxsJyB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHggaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlLnB1cmUgPyB4LmdldFRpbWUgKCkgOiBcIvCfk4UgIFwiICsgeC50b1N0cmluZyAoKSB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUuanNvbiA/ICdcIicgKyB4LnRvU3RyaW5nICgpICsgJ1wiJyA6IHgudG9TdHJpbmcgKCkgfVxuXG4gICAgICAgICAgICBlbHNlIGlmIChzdGF0ZS5wYXJlbnRzLmhhcyAoeCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUucHVyZSA/IHVuZGVmaW5lZCA6ICc8Y3ljbGljPicgfVxuXG4gICAgICAgICAgICBlbHNlIGlmICghc3RhdGUucHVyZSAmJiBzdGF0ZS5zaWJsaW5ncy5oYXMgKHgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICc8cmVmOicgKyBzdGF0ZS5zaWJsaW5ncy5nZXQgKHgpICsgJz4nIH1cblxuICAgICAgICAgICAgZWxzZSBpZiAoeCAmJiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICYmIChjdXN0b21Gb3JtYXQgPSB4W1N5bWJvbC5mb3IgKCdTdHJpbmcuaWZ5JyldKVxuICAgICAgICAgICAgICAgICAgICAgICAmJiAodHlwZW9mIGN1c3RvbUZvcm1hdCA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgICAgJiYgKHR5cGVvZiAoY3VzdG9tRm9ybWF0ID0gY3VzdG9tRm9ybWF0LmNhbGwgKHgsIHN0cmluZ2lmeS5jb25maWd1cmUgKHN0YXRlKSkpID09PSAnc3RyaW5nJykpIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiBjdXN0b21Gb3JtYXQgfVxuXG4gICAgICAgICAgICBlbHNlIGlmICh4IGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGNmZy5wdXJlID8geC50b1N0cmluZyAoKSA6ICh4Lm5hbWUgPyAoJzxmdW5jdGlvbjonICsgeC5uYW1lICsgJz4nKSA6ICc8ZnVuY3Rpb24+JykpIH1cblxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdcIicgKyBlc2NhcGVTdHIgKHN0cmluZ2lmeS5saW1pdCAoeCwgY2ZnLnB1cmUgPyBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiA6IGNmZy5tYXhTdHJpbmdMZW5ndGgpKSArICdcIicgfVxuXG4gICAgICAgICAgICBlbHNlIGlmICgoeCBpbnN0YW5jZW9mIFByb21pc2UpICYmICFzdGF0ZS5wdXJlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICc8UHJvbWlzZT4nIH1cblxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHggPT09ICdvYmplY3QnKSB7XG5cbiAgICAgICAgICAgICAgICBzdGF0ZS5wYXJlbnRzLmFkZCAoeClcbiAgICAgICAgICAgICAgICBzdGF0ZS5zaWJsaW5ncy5zZXQgKHgsIHN0YXRlLnNpYmxpbmdzLnNpemUpXG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBzdHJpbmdpZnkuY29uZmlndXJlIChPYmplY3QuYXNzaWduICh7fSwgc3RhdGUsIHsgcHJldHR5OiBzdGF0ZS5wcmV0dHkgPT09IGZhbHNlID8gZmFsc2UgOiAnYXV0bycsIGRlcHRoOiBzdGF0ZS5kZXB0aCArIDEgfSkpLm9iamVjdCAoeClcblxuICAgICAgICAgICAgICAgIHN0YXRlLnBhcmVudHMuZGVsZXRlICh4KVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKCh0eXBlb2YgeCA9PT0gJ251bWJlcicpICYmICFpc0ludGVnZXIgKHgpICYmIChjZmcucHJlY2lzaW9uID4gMCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geC50b0ZpeGVkIChjZmcucHJlY2lzaW9uKSB9XG5cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcgKHgpIH1cbiAgICAgICAgfVxuXG4gICAgLyogIEFQSSAgKi9cblxuICAgICAgICBhc3NpZ25Qcm9wcyAoc3RyaW5naWZ5LCB7XG5cbiAgICAgICAgICAgIHN0YXRlOiBjZmcsXG5cbiAgICAgICAgICAgIGNvbmZpZ3VyZTogbmV3Q29uZmlnID0+IGNvbmZpZ3VyZSAoT2JqZWN0LmFzc2lnbiAoe30sIGNmZywgbmV3Q29uZmlnKSksXG5cbiAgICAgICAgLyogIFRPRE86IGdlbmVyYWxpemUgZ2VuZXJhdGlvbiBvZiB0aGVzZSBjaGFpbi1zdHlsZSAuY29uZmlndXJlIGhlbHBlcnMgKG1heWJlIGluIGEgc2VwYXJhdGUgbGlicmFyeSwgYXMgaXQgbG9va3MgbGlrZSBhIGNvbW1vbiBwYXR0ZXJuKSAgICAqL1xuXG4gICAgICAgICAgICBnZXQgcHJldHR5ICAgKCkgeyByZXR1cm4gc3RyaW5naWZ5LmNvbmZpZ3VyZSAoeyBwcmV0dHk6IHRydWUgfSkgfSxcbiAgICAgICAgICAgIGdldCBub1ByZXR0eSAoKSB7IHJldHVybiBzdHJpbmdpZnkuY29uZmlndXJlICh7IHByZXR0eTogZmFsc2UgfSkgfSxcblxuICAgICAgICAgICAgZ2V0IGpzb24gKCkgeyByZXR1cm4gc3RyaW5naWZ5LmNvbmZpZ3VyZSAoeyBqc29uOiB0cnVlLCBwdXJlOiB0cnVlIH0pIH0sXG4gICAgICAgICAgICBnZXQgcHVyZSAoKSB7IHJldHVybiBzdHJpbmdpZnkuY29uZmlndXJlICh7IHB1cmU6IHRydWUgfSkgfSxcblxuICAgICAgICAgICAgbWF4U3RyaW5nTGVuZ3RoIChuID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHsgcmV0dXJuIHN0cmluZ2lmeS5jb25maWd1cmUgKHsgbWF4U3RyaW5nTGVuZ3RoOiBuIH0pIH0sXG4gICAgICAgICAgICBtYXhBcnJheUxlbmd0aCAgKG4gPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikgeyByZXR1cm4gc3RyaW5naWZ5LmNvbmZpZ3VyZSAoeyBtYXhBcnJheUxlbmd0aDogbiB9KSB9LFxuICAgICAgICAgICAgbWF4RGVwdGggICAgICAgIChuID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHsgcmV0dXJuIHN0cmluZ2lmeS5jb25maWd1cmUgKHsgbWF4RGVwdGg6IG4gfSkgfSxcbiAgICAgICAgICAgIG1heExlbmd0aCAgICAgICAobiA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7IHJldHVybiBzdHJpbmdpZnkuY29uZmlndXJlICh7IG1heExlbmd0aDogbiB9KSB9LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBwcmVjaXNpb24gKHApIHsgcmV0dXJuIHN0cmluZ2lmeS5jb25maWd1cmUgKHsgcHJlY2lzaW9uOiBwIH0pIH0sXG4gICAgICAgICAgICBmb3JtYXR0ZXIgKGYpIHsgcmV0dXJuIHN0cmluZ2lmeS5jb25maWd1cmUgKHsgZm9ybWF0dGVyOiBmIH0pIH0sXG5cbiAgICAgICAgLyogIFNvbWUgdW5kb2N1bWVudGVkIGludGVybmFscyAgICAqL1xuXG4gICAgICAgICAgICBsaW1pdDogKHMsIG4pID0+IHMgJiYgKChzLmxlbmd0aCA8PSBuKSA/IHMgOiAocy5zdWJzdHIgKDAsIG4gLSAxKSArICfigKYnKSksXG5cbiAgICAgICAgICAgIHJpZ2h0QWxpZ246IHN0cmluZ3MgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXggPSBtYXhPZiAoc3RyaW5ncywgcyA9PiBzLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5ncy5tYXAgKHMgPT4gJyAnLnJlcGVhdCAobWF4IC0gcy5sZW5ndGgpICsgcykgfSxcblxuICAgICAgICAgICAgb2JqZWN0OiB4ID0+IHtcblxuICAgICAgICAgICAgICAgIGlmICh4IGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSBBcnJheS5mcm9tICh4LnZhbHVlcyAoKSkgfVxuXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoeCBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgICAgICAgICB4ID0gQXJyYXkuZnJvbSAoeC5lbnRyaWVzICgpKSB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSAoeClcblxuICAgICAgICAgICAgICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICh4IGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8JyArICh4LnRhZ05hbWUudG9Mb3dlckNhc2UgKCkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCh4LmlkICYmICgnIycgKyB4LmlkKSkgfHwgJycpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoeC5jbGFzc05hbWUgJiYgKCcuJyArIHguY2xhc3NOYW1lKSkgfHwgJycpKSArICc+JyB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh4IGluc3RhbmNlb2YgVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdAJyArIHN0cmluZ2lmeS5saW1pdCAoeC53aG9sZVRleHQsIDIwKSB9IH1cblxuICAgICAgICAgICAgICAgIGlmICghY2ZnLnB1cmUgJiYgKChjZmcuZGVwdGggPiBjZmcubWF4RGVwdGgpIHx8IChpc0FycmF5ICYmICh4Lmxlbmd0aCA+IGNmZy5tYXhBcnJheUxlbmd0aCkpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNBcnJheSA/ICc8YXJyYXlbJyArIHgubGVuZ3RoICsgJ10+JyA6ICc8b2JqZWN0PicgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldHR5ICAgPSBjZmcucHJldHR5ID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMgID0gT2JqZWN0LmVudHJpZXMgKHgpLFxuICAgICAgICAgICAgICAgICAgICAgIG9uZUxpbmUgID0gIXByZXR0eSB8fCAoZW50cmllcy5sZW5ndGggPCAyKSxcbiAgICAgICAgICAgICAgICAgICAgICBxdW90ZUtleSA9IChjZmcuanNvbiA/IChrID0+ICdcIicgKyBlc2NhcGVTdHIgKGspICsgJ1wiJykgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGsgPT4gL15bQS16XVtBLXowLTldKiQvLnRlc3QgKGspID8gayA6IChcIidcIiArIGVzY2FwZVN0ciAoaykgKyBcIidcIikpKVxuXG4gICAgICAgICAgICAgICAgaWYgKHByZXR0eSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlcyAgICAgICAgPSBPYmplY3QudmFsdWVzICh4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnRlZEtleXMgICA9IHN0cmluZ2lmeS5yaWdodEFsaWduIChPYmplY3Qua2V5cyAoeCkubWFwIChrID0+IHF1b3RlS2V5IChrKSArICc6ICcpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnRlZFZhbHVlcyA9IHZhbHVlcy5tYXAgKHN0cmluZ2lmeSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRQYWRkaW5ncyAgPSBwcmludGVkVmFsdWVzLm1hcCAoKHgsIGkpID0+ICgoKHhbMF0gPT09ICdbJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoeFswXSA9PT0gJ3snKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICgodHlwZW9mIHZhbHVlc1tpXSA9PT0gJ3N0cmluZycpID8gMSA6IDApKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1heExlZnRQYWRkaW5nID0gbWF4T2YgKGxlZnRQYWRkaW5ncyksXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMgPSBsZWZ0UGFkZGluZ3MubWFwICgocGFkZGluZywgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9ICcgJy5yZXBlYXQgKG1heExlZnRQYWRkaW5nIC0gcGFkZGluZykgKyBwcmludGVkVmFsdWVzW2ldXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0FycmF5ID8gdmFsdWUgOiBidWxsZXQgKHByaW50ZWRLZXlzW2ldLCB2YWx1ZSkgfSksXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnRlZCA9IGJ1bGxldCAoaXNBcnJheSA/ICdbICcgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3sgJywgaXRlbXMuam9pbiAoJyxcXG4nKSksXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXMgICAgPSBwcmludGVkLnNwbGl0ICgnXFxuJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RMaW5lID0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJpbnRlZCArICAoJyAnLnJlcGVhdCAobWF4T2YgKGxpbmVzLCBsID0+IGwubGVuZ3RoKSAtIGxhc3RMaW5lLmxlbmd0aCkgKyAoaXNBcnJheSA/ICcgXScgOiAnIH0nKSkgfVxuXG4gICAgICAgICAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbXMgICA9IGVudHJpZXMubWFwIChrdiA9PiAoaXNBcnJheSA/ICcnIDogKHF1b3RlS2V5IChrdlswXSkgKyAnOiAnKSkgKyBzdHJpbmdpZnkgKGt2WzFdKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBpdGVtcy5qb2luICgnLCAnKVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0FycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoJ1snICArIGNvbnRlbnQgKyAgJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKCd7ICcgKyBjb250ZW50ICsgJyB9JylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeVxuICAgIH1cblxubW9kdWxlLmV4cG9ydHMgPSBjb25maWd1cmUgKHtcblxuICAgICAgICAgICAgICAgICAgICBkZXB0aDogICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIHB1cmU6ICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGpzb246ICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgLy8gIGNvbG9yOiAgICAgICAgICAgZmFsc2UsIC8vIG5vdCBzdXBwb3J0ZWQgeWV0XG4gICAgICAgICAgICAgICAgICAgIG1heERlcHRoOiAgICAgICAgNSxcbiAgICAgICAgICAgICAgICAgICAgbWF4TGVuZ3RoOiAgICAgICA1MCxcbiAgICAgICAgICAgICAgICAgICAgbWF4QXJyYXlMZW5ndGg6ICA2MCxcbiAgICAgICAgICAgICAgICAgICAgbWF4U3RyaW5nTGVuZ3RoOiA2MCxcbiAgICAgICAgICAgICAgICAgICAgcHJlY2lzaW9uOiAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBwcmV0dHk6ICAgICAgICAgJ2F1dG8nLFxuICAgICAgICAgICAgICAgIH0pXG5cblxuIl19