"use strict";

function _objectValues(obj) {
    var values = [];
    var keys = Object.keys(obj);

    for (var k = 0; k < keys.length; ++k) values.push(obj[keys[k]]);

    return values;
}

function _objectEntries(obj) {
    var entries = [];
    var keys = Object.keys(obj);

    for (var k = 0; k < keys.length; ++k) entries.push([keys[k], obj[keys[k]]]);

    return entries;
}

const bullet = require('string.bullet'),
      isBrowser = typeof window !== 'undefined' && window.window === window && window.navigator,
      maxOf = (arr, pick) => arr.reduce((max, s) => Math.max(max, pick ? pick(s) : s), 0),
      isInteger = Number.isInteger || (value => typeof value === 'number' && isFinite(value) && Math.floor(value) === value),
      isTypedArray = x => x instanceof Float32Array || x instanceof Float64Array || x instanceof Int8Array || x instanceof Uint8Array || x instanceof Uint8ClampedArray || x instanceof Int16Array || x instanceof Int32Array || x instanceof Uint32Array;

const assignProps = (to, from) => {
    for (const prop in from) {
        Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
    };return to;
};

const escapeStr = x => x.replace(/\n/g, '\\n').replace(/\'/g, "\\'").replace(/\"/g, '\\"');

const { first, strlen } = require('printable-characters'); // handles ANSI codes and invisible characters

const limit = (s, n) => s && (strlen(s) <= n ? s : first(s, n - 1) + 'â€¦');

const configure = cfg => {

    const stringify = x => {

        const state = Object.assign({ parents: new Set(), siblings: new Map() }, cfg);

        if (cfg.pretty === 'auto') {
            const oneLine = stringify.configure({ pretty: false, siblings: new Map() })(x);
            return oneLine.length <= cfg.maxLength ? oneLine : stringify.configure({ pretty: true, siblings: new Map() })(x);
        }

        var customFormat = cfg.formatter && cfg.formatter(x, stringify);

        if (typeof customFormat === 'string') {
            return customFormat;
        }

        if (typeof jQuery !== 'undefined' && x instanceof jQuery) {
            x = x.toArray();
        } else if (isTypedArray(x)) {
            x = Array.from(x);
        }

        if (isBrowser && x === window) {
            return 'window';
        } else if (!isBrowser && typeof global !== 'undefined' && x === global) {
            return 'global';
        } else if (x === null) {
            return 'null';
        } else if (x instanceof Date) {
            return state.pure ? x.getTime() : "ðŸ“…  " + x.toString();
        } else if (x instanceof RegExp) {
            return state.json ? '"' + x.toString() + '"' : x.toString();
        } else if (state.parents.has(x)) {
            return state.pure ? undefined : '<cyclic>';
        } else if (!state.pure && state.siblings.has(x)) {
            return '<ref:' + state.siblings.get(x) + '>';
        } else if (x && typeof Symbol !== 'undefined' && (customFormat = x[Symbol.for('String.ify')]) && typeof customFormat === 'function' && typeof (customFormat = customFormat.call(x, stringify.configure(state))) === 'string') {

            return customFormat;
        } else if (x instanceof Function) {
            return cfg.pure ? x.toString() : x.name ? '<function:' + x.name + '>' : '<function>';
        } else if (typeof x === 'string') {
            return '"' + escapeStr(limit(x, cfg.pure ? Number.MAX_SAFE_INTEGER : cfg.maxStringLength)) + '"';
        } else if (x instanceof Promise && !state.pure) {
            return '<Promise>';
        } else if (typeof x === 'object') {

            state.parents.add(x);
            state.siblings.set(x, state.siblings.size);

            const result = stringify.configure(Object.assign({}, state, { pretty: state.pretty === false ? false : 'auto', depth: state.depth + 1 })).object(x);

            state.parents.delete(x);

            return result;
        } else if (typeof x === 'number' && !isInteger(x) && cfg.precision > 0) {
            return x.toFixed(cfg.precision);
        } else {
            return String(x);
        }
    };

    /*  API  */

    assignProps(stringify, {

        state: cfg,

        configure: newConfig => configure(Object.assign({}, cfg, newConfig)),

        /*  TODO: generalize generation of these chain-style .configure helpers (maybe in a separate library, as it looks like a common pattern)    */

        get pretty() {
            return stringify.configure({ pretty: true });
        },
        get noPretty() {
            return stringify.configure({ pretty: false });
        },
        get noFancy() {
            return stringify.configure({ fancy: false });
        },

        get json() {
            return stringify.configure({ json: true, pure: true });
        },
        get pure() {
            return stringify.configure({ pure: true });
        },

        maxStringLength(n = Number.MAX_SAFE_INTEGER) {
            return stringify.configure({ maxStringLength: n });
        },
        maxArrayLength(n = Number.MAX_SAFE_INTEGER) {
            return stringify.configure({ maxArrayLength: n });
        },
        maxObjectLength(n = Number.MAX_SAFE_INTEGER) {
            return stringify.configure({ maxObjectLength: n });
        },
        maxDepth(n = Number.MAX_SAFE_INTEGER) {
            return stringify.configure({ maxDepth: n });
        },
        maxLength(n = Number.MAX_SAFE_INTEGER) {
            return stringify.configure({ maxLength: n });
        },

        precision(p) {
            return stringify.configure({ precision: p });
        },
        formatter(f) {
            return stringify.configure({ formatter: f });
        },

        /*  Some undocumented internals    */

        limit,

        rightAlign: strings => {
            var max = maxOf(strings, s => s.length);
            return strings.map(s => ' '.repeat(max - s.length) + s);
        },

        object: x => {

            if (x instanceof Set) {
                x = Array.from(x.values());
            } else if (x instanceof Map) {
                x = Array.from(x.entries());
            }

            const isArray = Array.isArray(x);

            if (isBrowser) {

                if (x instanceof Element) {
                    return '<' + (x.tagName.toLowerCase() + (x.id && '#' + x.id || '') + (x.className && '.' + x.className || '')) + '>';
                } else if (x instanceof Text) {
                    return '@' + stringify.limit(x.wholeText, 20);
                }
            }

            const entries = _objectEntries(x);

            const tooDeep = cfg.depth > cfg.maxDepth,
                  tooBig = isArray ? entries.length > cfg.maxArrayLength : entries.length > cfg.maxObjectLength;

            if (!cfg.pure && (tooDeep || tooBig)) {
                return '<' + (isArray ? 'array' : 'object') + '[' + entries.length + ']>';
            }

            const quoteKey = cfg.json ? k => '"' + escapeStr(k) + '"' : k => /^[A-z][A-z0-9]*$/.test(k) ? k : "'" + escapeStr(k) + "'";

            if (cfg.pretty) {

                const values = _objectValues(x),
                      right = cfg.rightAlignKeys && cfg.fancy,
                      printedKeys = (right ? stringify.rightAlign : x => x)(Object.keys(x).map(k => quoteKey(k) + ': ')),
                      printedValues = values.map(stringify),
                      brace = isArray ? '[' : '{',
                      endBrace = isArray ? ']' : '}';

                if (cfg.fancy) {

                    const leftPaddings = printedValues.map((x, i) => !right ? 0 : x[0] === '[' || x[0] === '{' ? 3 : typeof values[i] === 'string' ? 1 : 0),
                          maxLeftPadding = maxOf(leftPaddings),
                          items = leftPaddings.map((padding, i) => {
                        const value = ' '.repeat(maxLeftPadding - padding) + printedValues[i];
                        return isArray ? value : bullet(printedKeys[i], value);
                    }),
                          printed = bullet(brace + ' ', items.join(',\n')),
                          lines = printed.split('\n'),
                          lastLine = lines[lines.length - 1];

                    return printed + (' '.repeat(maxOf(lines, l => l.length) - lastLine.length) + ' ' + endBrace);
                } else {

                    const indent = cfg.indent.repeat(cfg.depth);

                    return brace + '\n' + printedValues.map((x, i) => indent + (isArray ? x : printedKeys[i] + x)).join(',\n') + '\n' + cfg.indent.repeat(cfg.depth - 1) + endBrace;
                }
            } else {

                const items = entries.map(kv => (isArray ? '' : quoteKey(kv[0]) + ': ') + stringify(kv[1])),
                      content = items.join(', ');

                return isArray ? '[' + content + ']' : '{ ' + content + ' }';
            }
        }
    });

    return stringify;
};

module.exports = configure({

    depth: 0,
    pure: false,
    json: false,
    //  color:           false, // not supported yet
    maxDepth: 5,
    maxLength: 50,
    maxArrayLength: 60,
    maxObjectLength: 200,
    maxStringLength: 60,
    precision: undefined,
    formatter: undefined,
    pretty: 'auto',
    rightAlignKeys: true,
    fancy: true,
    indent: '    '
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3N0cmluZy5pZnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsTUFBTSxTQUFlLFFBQVMsZUFBVCxDQUFyQjtBQUFBLE1BQ00sWUFBZ0IsT0FBTyxNQUFQLEtBQWtCLFdBQW5CLElBQW9DLE9BQU8sTUFBUCxLQUFrQixNQUF0RCxJQUFpRSxPQUFPLFNBRDdGO0FBQUEsTUFFTSxRQUFlLENBQUMsR0FBRCxFQUFNLElBQU4sS0FBZSxJQUFJLE1BQUosQ0FBWSxDQUFDLEdBQUQsRUFBTSxDQUFOLEtBQVksS0FBSyxHQUFMLENBQVUsR0FBVixFQUFlLE9BQU8sS0FBTSxDQUFOLENBQVAsR0FBa0IsQ0FBakMsQ0FBeEIsRUFBNkQsQ0FBN0QsQ0FGcEM7QUFBQSxNQUdNLFlBQWUsT0FBTyxTQUFQLEtBQXFCLFNBQVUsT0FBTyxLQUFQLEtBQWlCLFFBQWxCLElBQStCLFNBQVUsS0FBVixDQUEvQixJQUFvRCxLQUFLLEtBQUwsQ0FBWSxLQUFaLE1BQXVCLEtBQXpHLENBSHJCO0FBQUEsTUFJTSxlQUFlLEtBQU0sYUFBYSxZQUFkLElBQ0MsYUFBYSxZQURkLElBRUMsYUFBYSxTQUZkLElBR0MsYUFBYSxVQUhkLElBSUMsYUFBYSxpQkFKZCxJQUtDLGFBQWEsVUFMZCxJQU1DLGFBQWEsVUFOZCxJQU9DLGFBQWEsV0FYeEM7O0FBYUEsTUFBTSxjQUFjLENBQUMsRUFBRCxFQUFLLElBQUwsS0FBYztBQUFFLFNBQUssTUFBTSxJQUFYLElBQW1CLElBQW5CLEVBQXlCO0FBQUUsZUFBTyxjQUFQLENBQXVCLEVBQXZCLEVBQTJCLElBQTNCLEVBQWlDLE9BQU8sd0JBQVAsQ0FBaUMsSUFBakMsRUFBdUMsSUFBdkMsQ0FBakM7QUFBZ0YsTUFBRSxPQUFPLEVBQVA7QUFBVyxDQUE1Sjs7QUFFQSxNQUFNLFlBQVksS0FBSyxFQUFFLE9BQUYsQ0FBVyxLQUFYLEVBQWtCLEtBQWxCLEVBQ0UsT0FERixDQUNXLEtBRFgsRUFDa0IsS0FEbEIsRUFFRSxPQUZGLENBRVcsS0FGWCxFQUVrQixLQUZsQixDQUF2Qjs7QUFJQSxNQUFNLEVBQUUsS0FBRixFQUFTLE1BQVQsS0FBb0IsUUFBUyxzQkFBVCxDQUExQixDLENBQTJEOztBQUUzRCxNQUFNLFFBQVEsQ0FBQyxDQUFELEVBQUksQ0FBSixLQUFVLE1BQU8sT0FBUSxDQUFSLEtBQWMsQ0FBZixHQUFvQixDQUFwQixHQUF5QixNQUFPLENBQVAsRUFBVSxJQUFJLENBQWQsSUFBbUIsR0FBbEQsQ0FBeEI7O0FBRUEsTUFBTSxZQUFZLE9BQU87O0FBRXJCLFVBQU0sWUFBWSxLQUFLOztBQUVmLGNBQU0sUUFBUSxPQUFPLE1BQVAsQ0FBZSxFQUFFLFNBQVMsSUFBSSxHQUFKLEVBQVgsRUFBdUIsVUFBVSxJQUFJLEdBQUosRUFBakMsRUFBZixFQUE4RCxHQUE5RCxDQUFkOztBQUVBLFlBQUksSUFBSSxNQUFKLEtBQWUsTUFBbkIsRUFBMkI7QUFDdkIsa0JBQVEsVUFBNkMsVUFBVSxTQUFWLENBQXFCLEVBQUUsUUFBUSxLQUFWLEVBQWlCLFVBQVUsSUFBSSxHQUFKLEVBQTNCLEVBQXJCLEVBQStELENBQS9ELENBQXJEO0FBQ0EsbUJBQVEsUUFBUSxNQUFSLElBQWtCLElBQUksU0FBdkIsR0FBb0MsT0FBcEMsR0FBOEMsVUFBVSxTQUFWLENBQXFCLEVBQUUsUUFBUSxJQUFWLEVBQWlCLFVBQVUsSUFBSSxHQUFKLEVBQTNCLEVBQXJCLEVBQStELENBQS9ELENBQXJEO0FBQ0g7O0FBRUQsWUFBSSxlQUFlLElBQUksU0FBSixJQUFpQixJQUFJLFNBQUosQ0FBZSxDQUFmLEVBQWtCLFNBQWxCLENBQXBDOztBQUVBLFlBQUksT0FBTyxZQUFQLEtBQXdCLFFBQTVCLEVBQXNDO0FBQ2xDLG1CQUFPLFlBQVA7QUFBcUI7O0FBRXpCLFlBQUssT0FBTyxNQUFQLEtBQWtCLFdBQW5CLElBQW9DLGFBQWEsTUFBckQsRUFBOEQ7QUFDMUQsZ0JBQUksRUFBRSxPQUFGLEVBQUo7QUFBa0IsU0FEdEIsTUFHSyxJQUFJLGFBQWMsQ0FBZCxDQUFKLEVBQXNCO0FBQ3ZCLGdCQUFJLE1BQU0sSUFBTixDQUFZLENBQVosQ0FBSjtBQUFvQjs7QUFFeEIsWUFBSSxhQUFjLE1BQU0sTUFBeEIsRUFBaUM7QUFDN0IsbUJBQU8sUUFBUDtBQUFpQixTQURyQixNQUdLLElBQUksQ0FBQyxTQUFELElBQWUsT0FBTyxNQUFQLEtBQWtCLFdBQWpDLElBQWtELE1BQU0sTUFBNUQsRUFBcUU7QUFDdEUsbUJBQU8sUUFBUDtBQUFpQixTQURoQixNQUdBLElBQUksTUFBTSxJQUFWLEVBQWdCO0FBQ2pCLG1CQUFPLE1BQVA7QUFBZSxTQURkLE1BR0EsSUFBSSxhQUFhLElBQWpCLEVBQXVCO0FBQ3hCLG1CQUFPLE1BQU0sSUFBTixHQUFhLEVBQUUsT0FBRixFQUFiLEdBQTRCLFNBQVMsRUFBRSxRQUFGLEVBQTVDO0FBQTJELFNBRDFELE1BR0EsSUFBSSxhQUFhLE1BQWpCLEVBQXlCO0FBQzFCLG1CQUFPLE1BQU0sSUFBTixHQUFhLE1BQU0sRUFBRSxRQUFGLEVBQU4sR0FBc0IsR0FBbkMsR0FBeUMsRUFBRSxRQUFGLEVBQWhEO0FBQStELFNBRDlELE1BR0EsSUFBSSxNQUFNLE9BQU4sQ0FBYyxHQUFkLENBQW1CLENBQW5CLENBQUosRUFBMkI7QUFDNUIsbUJBQU8sTUFBTSxJQUFOLEdBQWEsU0FBYixHQUF5QixVQUFoQztBQUE0QyxTQUQzQyxNQUdBLElBQUksQ0FBQyxNQUFNLElBQVAsSUFBZSxNQUFNLFFBQU4sQ0FBZSxHQUFmLENBQW9CLENBQXBCLENBQW5CLEVBQTJDO0FBQzVDLG1CQUFPLFVBQVUsTUFBTSxRQUFOLENBQWUsR0FBZixDQUFvQixDQUFwQixDQUFWLEdBQW1DLEdBQTFDO0FBQStDLFNBRDlDLE1BR0EsSUFBSSxLQUFNLE9BQU8sTUFBUCxLQUFrQixXQUF4QixLQUNNLGVBQWUsRUFBRSxPQUFPLEdBQVAsQ0FBWSxZQUFaLENBQUYsQ0FEckIsS0FFTSxPQUFPLFlBQVAsS0FBd0IsVUFGOUIsSUFHTSxRQUFRLGVBQWUsYUFBYSxJQUFiLENBQW1CLENBQW5CLEVBQXNCLFVBQVUsU0FBVixDQUFxQixLQUFyQixDQUF0QixDQUF2QixNQUErRSxRQUh6RixFQUdvRzs7QUFFckcsbUJBQU8sWUFBUDtBQUFxQixTQUxwQixNQU9BLElBQUksYUFBYSxRQUFqQixFQUEyQjtBQUM1QixtQkFBUSxJQUFJLElBQUosR0FBVyxFQUFFLFFBQUYsRUFBWCxHQUE0QixFQUFFLElBQUYsR0FBVSxlQUFlLEVBQUUsSUFBakIsR0FBd0IsR0FBbEMsR0FBeUMsWUFBN0U7QUFBNkYsU0FENUYsTUFHQSxJQUFJLE9BQU8sQ0FBUCxLQUFhLFFBQWpCLEVBQTJCO0FBQzVCLG1CQUFPLE1BQU0sVUFBVyxNQUFPLENBQVAsRUFBVSxJQUFJLElBQUosR0FBVyxPQUFPLGdCQUFsQixHQUFxQyxJQUFJLGVBQW5ELENBQVgsQ0FBTixHQUF3RixHQUEvRjtBQUFvRyxTQURuRyxNQUdBLElBQUssYUFBYSxPQUFkLElBQTBCLENBQUMsTUFBTSxJQUFyQyxFQUEyQztBQUM1QyxtQkFBTyxXQUFQO0FBQW9CLFNBRG5CLE1BR0EsSUFBSSxPQUFPLENBQVAsS0FBYSxRQUFqQixFQUEyQjs7QUFFNUIsa0JBQU0sT0FBTixDQUFjLEdBQWQsQ0FBbUIsQ0FBbkI7QUFDQSxrQkFBTSxRQUFOLENBQWUsR0FBZixDQUFvQixDQUFwQixFQUF1QixNQUFNLFFBQU4sQ0FBZSxJQUF0Qzs7QUFFQSxrQkFBTSxTQUFTLFVBQVUsU0FBVixDQUFxQixPQUFPLE1BQVAsQ0FBZSxFQUFmLEVBQW1CLEtBQW5CLEVBQTBCLEVBQUUsUUFBUSxNQUFNLE1BQU4sS0FBaUIsS0FBakIsR0FBeUIsS0FBekIsR0FBaUMsTUFBM0MsRUFBbUQsT0FBTyxNQUFNLEtBQU4sR0FBYyxDQUF4RSxFQUExQixDQUFyQixFQUE2SCxNQUE3SCxDQUFxSSxDQUFySSxDQUFmOztBQUVBLGtCQUFNLE9BQU4sQ0FBYyxNQUFkLENBQXNCLENBQXRCOztBQUVBLG1CQUFPLE1BQVA7QUFBZSxTQVRkLE1BV0EsSUFBSyxPQUFPLENBQVAsS0FBYSxRQUFkLElBQTJCLENBQUMsVUFBVyxDQUFYLENBQTVCLElBQThDLElBQUksU0FBSixHQUFnQixDQUFsRSxFQUFzRTtBQUN2RSxtQkFBTyxFQUFFLE9BQUYsQ0FBVyxJQUFJLFNBQWYsQ0FBUDtBQUFrQyxTQURqQyxNQUdBO0FBQ0QsbUJBQU8sT0FBUSxDQUFSLENBQVA7QUFBbUI7QUFDMUIsS0F6RUw7O0FBMkVBOztBQUVJLGdCQUFhLFNBQWIsRUFBd0I7O0FBRXBCLGVBQU8sR0FGYTs7QUFJcEIsbUJBQVcsYUFBYSxVQUFXLE9BQU8sTUFBUCxDQUFlLEVBQWYsRUFBbUIsR0FBbkIsRUFBd0IsU0FBeEIsQ0FBWCxDQUpKOztBQU14Qjs7QUFFSSxZQUFJLE1BQUosR0FBZ0I7QUFBRSxtQkFBTyxVQUFVLFNBQVYsQ0FBcUIsRUFBRSxRQUFRLElBQVYsRUFBckIsQ0FBUDtBQUErQyxTQVI3QztBQVNwQixZQUFJLFFBQUosR0FBZ0I7QUFBRSxtQkFBTyxVQUFVLFNBQVYsQ0FBcUIsRUFBRSxRQUFRLEtBQVYsRUFBckIsQ0FBUDtBQUFnRCxTQVQ5QztBQVVwQixZQUFJLE9BQUosR0FBZ0I7QUFBRSxtQkFBTyxVQUFVLFNBQVYsQ0FBcUIsRUFBRSxPQUFRLEtBQVYsRUFBckIsQ0FBUDtBQUFnRCxTQVY5Qzs7QUFZcEIsWUFBSSxJQUFKLEdBQVk7QUFBRSxtQkFBTyxVQUFVLFNBQVYsQ0FBcUIsRUFBRSxNQUFNLElBQVIsRUFBYyxNQUFNLElBQXBCLEVBQXJCLENBQVA7QUFBeUQsU0FabkQ7QUFhcEIsWUFBSSxJQUFKLEdBQVk7QUFBRSxtQkFBTyxVQUFVLFNBQVYsQ0FBcUIsRUFBRSxNQUFNLElBQVIsRUFBckIsQ0FBUDtBQUE2QyxTQWJ2Qzs7QUFlcEIsd0JBQWlCLElBQUksT0FBTyxnQkFBNUIsRUFBOEM7QUFBRSxtQkFBTyxVQUFVLFNBQVYsQ0FBcUIsRUFBRSxpQkFBaUIsQ0FBbkIsRUFBckIsQ0FBUDtBQUFxRCxTQWZqRjtBQWdCcEIsdUJBQWlCLElBQUksT0FBTyxnQkFBNUIsRUFBOEM7QUFBRSxtQkFBTyxVQUFVLFNBQVYsQ0FBcUIsRUFBRSxnQkFBZ0IsQ0FBbEIsRUFBckIsQ0FBUDtBQUFvRCxTQWhCaEY7QUFpQnBCLHdCQUFpQixJQUFJLE9BQU8sZ0JBQTVCLEVBQThDO0FBQUUsbUJBQU8sVUFBVSxTQUFWLENBQXFCLEVBQUUsaUJBQWlCLENBQW5CLEVBQXJCLENBQVA7QUFBcUQsU0FqQmpGO0FBa0JwQixpQkFBaUIsSUFBSSxPQUFPLGdCQUE1QixFQUE4QztBQUFFLG1CQUFPLFVBQVUsU0FBVixDQUFxQixFQUFFLFVBQVUsQ0FBWixFQUFyQixDQUFQO0FBQThDLFNBbEIxRTtBQW1CcEIsa0JBQWlCLElBQUksT0FBTyxnQkFBNUIsRUFBOEM7QUFBRSxtQkFBTyxVQUFVLFNBQVYsQ0FBcUIsRUFBRSxXQUFXLENBQWIsRUFBckIsQ0FBUDtBQUErQyxTQW5CM0U7O0FBcUJwQixrQkFBVyxDQUFYLEVBQWM7QUFBRSxtQkFBTyxVQUFVLFNBQVYsQ0FBcUIsRUFBRSxXQUFXLENBQWIsRUFBckIsQ0FBUDtBQUErQyxTQXJCM0M7QUFzQnBCLGtCQUFXLENBQVgsRUFBYztBQUFFLG1CQUFPLFVBQVUsU0FBVixDQUFxQixFQUFFLFdBQVcsQ0FBYixFQUFyQixDQUFQO0FBQStDLFNBdEIzQzs7QUF3QnhCOztBQUVJLGFBMUJvQjs7QUE0QnBCLG9CQUFZLFdBQVc7QUFDUCxnQkFBSSxNQUFNLE1BQU8sT0FBUCxFQUFnQixLQUFLLEVBQUUsTUFBdkIsQ0FBVjtBQUNBLG1CQUFPLFFBQVEsR0FBUixDQUFhLEtBQUssSUFBSSxNQUFKLENBQVksTUFBTSxFQUFFLE1BQXBCLElBQThCLENBQWhELENBQVA7QUFBMkQsU0E5QnZEOztBQWdDcEIsZ0JBQVEsS0FBSzs7QUFFVCxnQkFBSSxhQUFhLEdBQWpCLEVBQXNCO0FBQ2xCLG9CQUFJLE1BQU0sSUFBTixDQUFZLEVBQUUsTUFBRixFQUFaLENBQUo7QUFBOEIsYUFEbEMsTUFHSyxJQUFJLGFBQWEsR0FBakIsRUFBc0I7QUFDdkIsb0JBQUksTUFBTSxJQUFOLENBQVksRUFBRSxPQUFGLEVBQVosQ0FBSjtBQUErQjs7QUFFbkMsa0JBQU0sVUFBVSxNQUFNLE9BQU4sQ0FBZSxDQUFmLENBQWhCOztBQUVBLGdCQUFJLFNBQUosRUFBZTs7QUFFWCxvQkFBSSxhQUFhLE9BQWpCLEVBQTBCO0FBQ3RCLDJCQUFPLE9BQU8sRUFBRSxPQUFGLENBQVUsV0FBVixNQUNBLEVBQUUsRUFBRixJQUFTLE1BQU0sRUFBRSxFQUFsQixJQUEwQixFQUR6QixLQUVBLEVBQUUsU0FBRixJQUFnQixNQUFNLEVBQUUsU0FBekIsSUFBd0MsRUFGdkMsQ0FBUCxJQUVxRCxHQUY1RDtBQUVpRSxpQkFIckUsTUFLSyxJQUFJLGFBQWEsSUFBakIsRUFBdUI7QUFDeEIsMkJBQU8sTUFBTSxVQUFVLEtBQVYsQ0FBaUIsRUFBRSxTQUFuQixFQUE4QixFQUE5QixDQUFiO0FBQWdEO0FBQUU7O0FBRTFELGtCQUFNLFVBQVUsZUFBZ0IsQ0FBaEIsQ0FBaEI7O0FBRUEsa0JBQU0sVUFBVyxJQUFJLEtBQUosR0FBWSxJQUFJLFFBQWpDO0FBQUEsa0JBQ00sU0FBVyxVQUFXLFFBQVEsTUFBUixHQUFpQixJQUFJLGNBQWhDLEdBQ1csUUFBUSxNQUFSLEdBQWlCLElBQUksZUFGakQ7O0FBSUEsZ0JBQUksQ0FBQyxJQUFJLElBQUwsS0FBYyxXQUFXLE1BQXpCLENBQUosRUFBc0M7QUFDbEMsdUJBQU8sT0FBTyxVQUFVLE9BQVYsR0FBb0IsUUFBM0IsSUFBdUMsR0FBdkMsR0FBNkMsUUFBUSxNQUFyRCxHQUE4RCxJQUFyRTtBQUNIOztBQUVELGtCQUFNLFdBQVksSUFBSSxJQUFKLEdBQVksS0FBSyxNQUFNLFVBQVcsQ0FBWCxDQUFOLEdBQXNCLEdBQXZDLEdBQ1ksS0FBSyxtQkFBbUIsSUFBbkIsQ0FBeUIsQ0FBekIsSUFBOEIsQ0FBOUIsR0FBbUMsTUFBTSxVQUFXLENBQVgsQ0FBTixHQUFzQixHQUQ1Rjs7QUFHQSxnQkFBSSxJQUFJLE1BQVIsRUFBZ0I7O0FBRVosc0JBQU0sU0FBZ0IsY0FBZSxDQUFmLENBQXRCO0FBQUEsc0JBQ00sUUFBZ0IsSUFBSSxjQUFKLElBQXNCLElBQUksS0FEaEQ7QUFBQSxzQkFFTSxjQUFnQixDQUFDLFFBQVEsVUFBVSxVQUFsQixHQUErQixLQUFLLENBQXJDLEVBQXlDLE9BQU8sSUFBUCxDQUFhLENBQWIsRUFBZ0IsR0FBaEIsQ0FBcUIsS0FBSyxTQUFVLENBQVYsSUFBZSxJQUF6QyxDQUF6QyxDQUZ0QjtBQUFBLHNCQUdNLGdCQUFnQixPQUFPLEdBQVAsQ0FBWSxTQUFaLENBSHRCO0FBQUEsc0JBSU0sUUFBZ0IsVUFBVSxHQUFWLEdBQWdCLEdBSnRDO0FBQUEsc0JBS00sV0FBZ0IsVUFBVSxHQUFWLEdBQWdCLEdBTHRDOztBQU9BLG9CQUFJLElBQUksS0FBUixFQUFlOztBQUVYLDBCQUFNLGVBQWUsY0FBYyxHQUFkLENBQW1CLENBQUMsQ0FBRCxFQUFJLENBQUosS0FBVyxDQUFDLEtBQUQsR0FBUyxDQUFULEdBQWUsRUFBRSxDQUFGLE1BQVMsR0FBVixJQUNDLEVBQUUsQ0FBRixNQUFTLEdBRFgsR0FFTSxDQUZOLEdBR1EsT0FBTyxPQUFPLENBQVAsQ0FBUCxLQUFxQixRQUF0QixHQUFrQyxDQUFsQyxHQUFzQyxDQUh4RixDQUFyQjtBQUFBLDBCQUlNLGlCQUFpQixNQUFPLFlBQVAsQ0FKdkI7QUFBQSwwQkFNTSxRQUFRLGFBQWEsR0FBYixDQUFrQixDQUFDLE9BQUQsRUFBVSxDQUFWLEtBQWdCO0FBQ3hCLDhCQUFNLFFBQVEsSUFBSSxNQUFKLENBQVksaUJBQWlCLE9BQTdCLElBQXdDLGNBQWMsQ0FBZCxDQUF0RDtBQUNBLCtCQUFPLFVBQVUsS0FBVixHQUFrQixPQUFRLFlBQVksQ0FBWixDQUFSLEVBQXdCLEtBQXhCLENBQXpCO0FBQ1QscUJBSEQsQ0FOZDtBQUFBLDBCQVdNLFVBQWEsT0FBUSxRQUFRLEdBQWhCLEVBQXFCLE1BQU0sSUFBTixDQUFZLEtBQVosQ0FBckIsQ0FYbkI7QUFBQSwwQkFZTSxRQUFhLFFBQVEsS0FBUixDQUFlLElBQWYsQ0FabkI7QUFBQSwwQkFhTSxXQUFhLE1BQU0sTUFBTSxNQUFOLEdBQWUsQ0FBckIsQ0FibkI7O0FBZUEsMkJBQU8sV0FBWSxJQUFJLE1BQUosQ0FBWSxNQUFPLEtBQVAsRUFBYyxLQUFLLEVBQUUsTUFBckIsSUFBK0IsU0FBUyxNQUFwRCxJQUE4RCxHQUE5RCxHQUFvRSxRQUFoRixDQUFQO0FBRUgsaUJBbkJELE1BbUJPOztBQUVILDBCQUFNLFNBQVMsSUFBSSxNQUFKLENBQVcsTUFBWCxDQUFtQixJQUFJLEtBQXZCLENBQWY7O0FBRUEsMkJBQU8sUUFBUSxJQUFSLEdBQ0ssY0FBYyxHQUFkLENBQW1CLENBQUMsQ0FBRCxFQUFJLENBQUosS0FBVSxVQUFVLFVBQVUsQ0FBVixHQUFlLFlBQVksQ0FBWixJQUFpQixDQUExQyxDQUE3QixFQUE0RSxJQUE1RSxDQUFrRixLQUFsRixDQURMLEdBQ2dHLElBRGhHLEdBRUssSUFBSSxNQUFKLENBQVcsTUFBWCxDQUFtQixJQUFJLEtBQUosR0FBWSxDQUEvQixDQUZMLEdBR0EsUUFIUDtBQUlIO0FBRUosYUF0Q0QsTUFzQ087O0FBRUgsc0JBQU0sUUFBVSxRQUFRLEdBQVIsQ0FBYSxNQUFNLENBQUMsVUFBVSxFQUFWLEdBQWdCLFNBQVUsR0FBRyxDQUFILENBQVYsSUFBbUIsSUFBcEMsSUFBNkMsVUFBVyxHQUFHLENBQUgsQ0FBWCxDQUFoRSxDQUFoQjtBQUFBLHNCQUNNLFVBQVUsTUFBTSxJQUFOLENBQVksSUFBWixDQURoQjs7QUFHQSx1QkFBTyxVQUNJLE1BQU8sT0FBUCxHQUFrQixHQUR0QixHQUVJLE9BQU8sT0FBUCxHQUFpQixJQUY1QjtBQUdIO0FBQ0o7QUFoSG1CLEtBQXhCOztBQW1IQSxXQUFPLFNBQVA7QUFDSCxDQW5NTDs7QUFxTUEsT0FBTyxPQUFQLEdBQWlCLFVBQVc7O0FBRVIsV0FBaUIsQ0FGVDtBQUdSLFVBQWlCLEtBSFQ7QUFJUixVQUFpQixLQUpUO0FBS1o7QUFDSSxjQUFpQixDQU5UO0FBT1IsZUFBaUIsRUFQVDtBQVFSLG9CQUFpQixFQVJUO0FBU1IscUJBQWlCLEdBVFQ7QUFVUixxQkFBaUIsRUFWVDtBQVdSLGVBQWlCLFNBWFQ7QUFZUixlQUFpQixTQVpUO0FBYVIsWUFBZ0IsTUFiUjtBQWNSLG9CQUFpQixJQWRUO0FBZVIsV0FBaUIsSUFmVDtBQWdCUixZQUFnQjtBQWhCUixDQUFYLENBQWpCIiwiZmlsZSI6InN0cmluZy5pZnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgYnVsbGV0ICAgICAgID0gcmVxdWlyZSAoJ3N0cmluZy5idWxsZXQnKSxcbiAgICAgIGlzQnJvd3NlciAgICA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgJiYgKHdpbmRvdy53aW5kb3cgPT09IHdpbmRvdykgJiYgd2luZG93Lm5hdmlnYXRvcixcbiAgICAgIG1heE9mICAgICAgICA9IChhcnIsIHBpY2spID0+IGFyci5yZWR1Y2UgKChtYXgsIHMpID0+IE1hdGgubWF4IChtYXgsIHBpY2sgPyBwaWNrIChzKSA6IHMpLCAwKSxcbiAgICAgIGlzSW50ZWdlciAgICA9IE51bWJlci5pc0ludGVnZXIgfHwgKHZhbHVlID0+ICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSAmJiBpc0Zpbml0ZSAodmFsdWUpICYmIChNYXRoLmZsb29yICh2YWx1ZSkgPT09IHZhbHVlKSksXG4gICAgICBpc1R5cGVkQXJyYXkgPSB4ID0+ICh4IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoeCBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKHggaW5zdGFuY2VvZiBJbnQ4QXJyYXkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICh4IGluc3RhbmNlb2YgVWludDhBcnJheSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKHggaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKHggaW5zdGFuY2VvZiBJbnQxNkFycmF5KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoeCBpbnN0YW5jZW9mIEludDMyQXJyYXkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICh4IGluc3RhbmNlb2YgVWludDMyQXJyYXkpXG5cbmNvbnN0IGFzc2lnblByb3BzID0gKHRvLCBmcm9tKSA9PiB7IGZvciAoY29uc3QgcHJvcCBpbiBmcm9tKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAodG8sIHByb3AsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgKGZyb20sIHByb3ApKSB9OyByZXR1cm4gdG8gfVxuXG5jb25zdCBlc2NhcGVTdHIgPSB4ID0+IHgucmVwbGFjZSAoL1xcbi9nLCAnXFxcXG4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UgKC9cXCcvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UgKC9cXFwiL2csICdcXFxcXCInKVxuXG5jb25zdCB7IGZpcnN0LCBzdHJsZW4gfSA9IHJlcXVpcmUgKCdwcmludGFibGUtY2hhcmFjdGVycycpIC8vIGhhbmRsZXMgQU5TSSBjb2RlcyBhbmQgaW52aXNpYmxlIGNoYXJhY3RlcnNcblxuY29uc3QgbGltaXQgPSAocywgbikgPT4gcyAmJiAoKHN0cmxlbiAocykgPD0gbikgPyBzIDogKGZpcnN0IChzLCBuIC0gMSkgKyAn4oCmJykpXG5cbmNvbnN0IGNvbmZpZ3VyZSA9IGNmZyA9PiB7XG5cbiAgICBjb25zdCBzdHJpbmdpZnkgPSB4ID0+IHtcblxuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBPYmplY3QuYXNzaWduICh7IHBhcmVudHM6IG5ldyBTZXQgKCksIHNpYmxpbmdzOiBuZXcgTWFwICgpIH0sIGNmZylcblxuICAgICAgICAgICAgaWYgKGNmZy5wcmV0dHkgPT09ICdhdXRvJykge1xuICAgICAgICAgICAgICAgIGNvbnN0ICAgb25lTGluZSA9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5naWZ5LmNvbmZpZ3VyZSAoeyBwcmV0dHk6IGZhbHNlLCBzaWJsaW5nczogbmV3IE1hcCAoKSB9KSAoeClcbiAgICAgICAgICAgICAgICByZXR1cm4gKG9uZUxpbmUubGVuZ3RoIDw9IGNmZy5tYXhMZW5ndGgpID8gb25lTGluZSA6IHN0cmluZ2lmeS5jb25maWd1cmUgKHsgcHJldHR5OiB0cnVlLCAgc2libGluZ3M6IG5ldyBNYXAgKCkgfSkgKHgpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjdXN0b21Gb3JtYXQgPSBjZmcuZm9ybWF0dGVyICYmIGNmZy5mb3JtYXR0ZXIgKHgsIHN0cmluZ2lmeSlcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXN0b21Gb3JtYXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1c3RvbUZvcm1hdCB9XG5cbiAgICAgICAgICAgIGlmICgodHlwZW9mIGpRdWVyeSAhPT0gJ3VuZGVmaW5lZCcpICYmICh4IGluc3RhbmNlb2YgalF1ZXJ5KSkge1xuICAgICAgICAgICAgICAgIHggPSB4LnRvQXJyYXkgKCkgfVxuXG4gICAgICAgICAgICBlbHNlIGlmIChpc1R5cGVkQXJyYXkgKHgpKSB7XG4gICAgICAgICAgICAgICAgeCA9IEFycmF5LmZyb20gKHgpIH1cblxuICAgICAgICAgICAgaWYgKGlzQnJvd3NlciAmJiAoeCA9PT0gd2luZG93KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnd2luZG93JyB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKCFpc0Jyb3dzZXIgJiYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSAmJiAoeCA9PT0gZ2xvYmFsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZ2xvYmFsJyB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ251bGwnIH1cblxuICAgICAgICAgICAgZWxzZSBpZiAoeCBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUucHVyZSA/IHguZ2V0VGltZSAoKSA6IFwi8J+ThSAgXCIgKyB4LnRvU3RyaW5nICgpIH1cblxuICAgICAgICAgICAgZWxzZSBpZiAoeCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZS5qc29uID8gJ1wiJyArIHgudG9TdHJpbmcgKCkgKyAnXCInIDogeC50b1N0cmluZyAoKSB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHN0YXRlLnBhcmVudHMuaGFzICh4KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZS5wdXJlID8gdW5kZWZpbmVkIDogJzxjeWNsaWM+JyB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKCFzdGF0ZS5wdXJlICYmIHN0YXRlLnNpYmxpbmdzLmhhcyAoeCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJzxyZWY6JyArIHN0YXRlLnNpYmxpbmdzLmdldCAoeCkgKyAnPicgfVxuXG4gICAgICAgICAgICBlbHNlIGlmICh4ICYmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgJiYgKGN1c3RvbUZvcm1hdCA9IHhbU3ltYm9sLmZvciAoJ1N0cmluZy5pZnknKV0pXG4gICAgICAgICAgICAgICAgICAgICAgICYmICh0eXBlb2YgY3VzdG9tRm9ybWF0ID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgICAgICAgICAmJiAodHlwZW9mIChjdXN0b21Gb3JtYXQgPSBjdXN0b21Gb3JtYXQuY2FsbCAoeCwgc3RyaW5naWZ5LmNvbmZpZ3VyZSAoc3RhdGUpKSkgPT09ICdzdHJpbmcnKSkge1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1c3RvbUZvcm1hdCB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHggaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoY2ZnLnB1cmUgPyB4LnRvU3RyaW5nICgpIDogKHgubmFtZSA/ICgnPGZ1bmN0aW9uOicgKyB4Lm5hbWUgKyAnPicpIDogJzxmdW5jdGlvbj4nKSkgfVxuXG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgeCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1wiJyArIGVzY2FwZVN0ciAobGltaXQgKHgsIGNmZy5wdXJlID8gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgOiBjZmcubWF4U3RyaW5nTGVuZ3RoKSkgKyAnXCInIH1cblxuICAgICAgICAgICAgZWxzZSBpZiAoKHggaW5zdGFuY2VvZiBQcm9taXNlKSAmJiAhc3RhdGUucHVyZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnPFByb21pc2U+JyB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB4ID09PSAnb2JqZWN0Jykge1xuXG4gICAgICAgICAgICAgICAgc3RhdGUucGFyZW50cy5hZGQgKHgpXG4gICAgICAgICAgICAgICAgc3RhdGUuc2libGluZ3Muc2V0ICh4LCBzdGF0ZS5zaWJsaW5ncy5zaXplKVxuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gc3RyaW5naWZ5LmNvbmZpZ3VyZSAoT2JqZWN0LmFzc2lnbiAoe30sIHN0YXRlLCB7IHByZXR0eTogc3RhdGUucHJldHR5ID09PSBmYWxzZSA/IGZhbHNlIDogJ2F1dG8nLCBkZXB0aDogc3RhdGUuZGVwdGggKyAxIH0pKS5vYmplY3QgKHgpXG5cbiAgICAgICAgICAgICAgICBzdGF0ZS5wYXJlbnRzLmRlbGV0ZSAoeClcblxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgfVxuXG4gICAgICAgICAgICBlbHNlIGlmICgodHlwZW9mIHggPT09ICdudW1iZXInKSAmJiAhaXNJbnRlZ2VyICh4KSAmJiAoY2ZnLnByZWNpc2lvbiA+IDApKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHgudG9GaXhlZCAoY2ZnLnByZWNpc2lvbikgfVxuXG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nICh4KSB9XG4gICAgICAgIH1cblxuICAgIC8qICBBUEkgICovXG5cbiAgICAgICAgYXNzaWduUHJvcHMgKHN0cmluZ2lmeSwge1xuXG4gICAgICAgICAgICBzdGF0ZTogY2ZnLFxuXG4gICAgICAgICAgICBjb25maWd1cmU6IG5ld0NvbmZpZyA9PiBjb25maWd1cmUgKE9iamVjdC5hc3NpZ24gKHt9LCBjZmcsIG5ld0NvbmZpZykpLFxuXG4gICAgICAgIC8qICBUT0RPOiBnZW5lcmFsaXplIGdlbmVyYXRpb24gb2YgdGhlc2UgY2hhaW4tc3R5bGUgLmNvbmZpZ3VyZSBoZWxwZXJzIChtYXliZSBpbiBhIHNlcGFyYXRlIGxpYnJhcnksIGFzIGl0IGxvb2tzIGxpa2UgYSBjb21tb24gcGF0dGVybikgICAgKi9cblxuICAgICAgICAgICAgZ2V0IHByZXR0eSAgICgpIHsgcmV0dXJuIHN0cmluZ2lmeS5jb25maWd1cmUgKHsgcHJldHR5OiB0cnVlIH0pIH0sXG4gICAgICAgICAgICBnZXQgbm9QcmV0dHkgKCkgeyByZXR1cm4gc3RyaW5naWZ5LmNvbmZpZ3VyZSAoeyBwcmV0dHk6IGZhbHNlIH0pIH0sXG4gICAgICAgICAgICBnZXQgbm9GYW5jeSAgKCkgeyByZXR1cm4gc3RyaW5naWZ5LmNvbmZpZ3VyZSAoeyBmYW5jeTogIGZhbHNlIH0pIH0sXG5cbiAgICAgICAgICAgIGdldCBqc29uICgpIHsgcmV0dXJuIHN0cmluZ2lmeS5jb25maWd1cmUgKHsganNvbjogdHJ1ZSwgcHVyZTogdHJ1ZSB9KSB9LFxuICAgICAgICAgICAgZ2V0IHB1cmUgKCkgeyByZXR1cm4gc3RyaW5naWZ5LmNvbmZpZ3VyZSAoeyBwdXJlOiB0cnVlIH0pIH0sXG5cbiAgICAgICAgICAgIG1heFN0cmluZ0xlbmd0aCAobiA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7IHJldHVybiBzdHJpbmdpZnkuY29uZmlndXJlICh7IG1heFN0cmluZ0xlbmd0aDogbiB9KSB9LFxuICAgICAgICAgICAgbWF4QXJyYXlMZW5ndGggIChuID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHsgcmV0dXJuIHN0cmluZ2lmeS5jb25maWd1cmUgKHsgbWF4QXJyYXlMZW5ndGg6IG4gfSkgfSxcbiAgICAgICAgICAgIG1heE9iamVjdExlbmd0aCAobiA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7IHJldHVybiBzdHJpbmdpZnkuY29uZmlndXJlICh7IG1heE9iamVjdExlbmd0aDogbiB9KSB9LFxuICAgICAgICAgICAgbWF4RGVwdGggICAgICAgIChuID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHsgcmV0dXJuIHN0cmluZ2lmeS5jb25maWd1cmUgKHsgbWF4RGVwdGg6IG4gfSkgfSxcbiAgICAgICAgICAgIG1heExlbmd0aCAgICAgICAobiA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7IHJldHVybiBzdHJpbmdpZnkuY29uZmlndXJlICh7IG1heExlbmd0aDogbiB9KSB9LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBwcmVjaXNpb24gKHApIHsgcmV0dXJuIHN0cmluZ2lmeS5jb25maWd1cmUgKHsgcHJlY2lzaW9uOiBwIH0pIH0sXG4gICAgICAgICAgICBmb3JtYXR0ZXIgKGYpIHsgcmV0dXJuIHN0cmluZ2lmeS5jb25maWd1cmUgKHsgZm9ybWF0dGVyOiBmIH0pIH0sXG5cbiAgICAgICAgLyogIFNvbWUgdW5kb2N1bWVudGVkIGludGVybmFscyAgICAqL1xuXG4gICAgICAgICAgICBsaW1pdCxcblxuICAgICAgICAgICAgcmlnaHRBbGlnbjogc3RyaW5ncyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1heCA9IG1heE9mIChzdHJpbmdzLCBzID0+IHMubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdzLm1hcCAocyA9PiAnICcucmVwZWF0IChtYXggLSBzLmxlbmd0aCkgKyBzKSB9LFxuXG4gICAgICAgICAgICBvYmplY3Q6IHggPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKHggaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IEFycmF5LmZyb20gKHgudmFsdWVzICgpKSB9XG5cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh4IGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHggPSBBcnJheS5mcm9tICh4LmVudHJpZXMgKCkpIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5ICh4KVxuXG4gICAgICAgICAgICAgICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKHggaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzwnICsgKHgudGFnTmFtZS50b0xvd2VyQ2FzZSAoKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKHguaWQgJiYgKCcjJyArIHguaWQpKSB8fCAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCh4LmNsYXNzTmFtZSAmJiAoJy4nICsgeC5jbGFzc05hbWUpKSB8fCAnJykpICsgJz4nIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHggaW5zdGFuY2VvZiBUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0AnICsgc3RyaW5naWZ5LmxpbWl0ICh4Lndob2xlVGV4dCwgMjApIH0gfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzICh4KVxuXG4gICAgICAgICAgICAgICAgY29uc3QgdG9vRGVlcCA9IChjZmcuZGVwdGggPiBjZmcubWF4RGVwdGgpXG4gICAgICAgICAgICAgICAgICAgICwgdG9vQmlnICA9IChpc0FycmF5ID8gKGVudHJpZXMubGVuZ3RoID4gY2ZnLm1heEFycmF5TGVuZ3RoKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGVudHJpZXMubGVuZ3RoID4gY2ZnLm1heE9iamVjdExlbmd0aCkpXG5cbiAgICAgICAgICAgICAgICBpZiAoIWNmZy5wdXJlICYmICh0b29EZWVwIHx8IHRvb0JpZykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8JyArIChpc0FycmF5ID8gJ2FycmF5JyA6ICdvYmplY3QnKSArICdbJyArIGVudHJpZXMubGVuZ3RoICsgJ10+J1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHF1b3RlS2V5ID0gKGNmZy5qc29uID8gKGsgPT4gJ1wiJyArIGVzY2FwZVN0ciAoaykgKyAnXCInKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoayA9PiAvXltBLXpdW0EtejAtOV0qJC8udGVzdCAoaykgPyBrIDogKFwiJ1wiICsgZXNjYXBlU3RyIChrKSArIFwiJ1wiKSkpXG5cbiAgICAgICAgICAgICAgICBpZiAoY2ZnLnByZXR0eSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlcyAgICAgICAgPSBPYmplY3QudmFsdWVzICh4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQgICAgICAgICA9IGNmZy5yaWdodEFsaWduS2V5cyAmJiBjZmcuZmFuY3ksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ZWRLZXlzICAgPSAocmlnaHQgPyBzdHJpbmdpZnkucmlnaHRBbGlnbiA6IHggPT4geCkgKE9iamVjdC5rZXlzICh4KS5tYXAgKGsgPT4gcXVvdGVLZXkgKGspICsgJzogJykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludGVkVmFsdWVzID0gdmFsdWVzLm1hcCAoc3RyaW5naWZ5KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhY2UgICAgICAgICA9IGlzQXJyYXkgPyAnWycgOiAneycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEJyYWNlICAgICAgPSBpc0FycmF5ID8gJ10nIDogJ30nXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNmZy5mYW5jeSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZWZ0UGFkZGluZ3MgPSBwcmludGVkVmFsdWVzLm1hcCAoKHgsIGkpID0+ICghcmlnaHQgPyAwIDogKCh4WzBdID09PSAnWycpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh4WzBdID09PSAneycpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoKHR5cGVvZiB2YWx1ZXNbaV0gPT09ICdzdHJpbmcnKSA/IDEgOiAwKSkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4TGVmdFBhZGRpbmcgPSBtYXhPZiAobGVmdFBhZGRpbmdzKSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMgPSBsZWZ0UGFkZGluZ3MubWFwICgocGFkZGluZywgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSAnICcucmVwZWF0IChtYXhMZWZ0UGFkZGluZyAtIHBhZGRpbmcpICsgcHJpbnRlZFZhbHVlc1tpXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkgPyB2YWx1ZSA6IGJ1bGxldCAocHJpbnRlZEtleXNbaV0sIHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnRlZCAgICA9IGJ1bGxldCAoYnJhY2UgKyAnICcsIGl0ZW1zLmpvaW4gKCcsXFxuJykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXMgICAgICA9IHByaW50ZWQuc3BsaXQgKCdcXG4nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RMaW5lICAgPSBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJpbnRlZCArICAoJyAnLnJlcGVhdCAobWF4T2YgKGxpbmVzLCBsID0+IGwubGVuZ3RoKSAtIGxhc3RMaW5lLmxlbmd0aCkgKyAnICcgKyBlbmRCcmFjZSlcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRlbnQgPSBjZmcuaW5kZW50LnJlcGVhdCAoY2ZnLmRlcHRoKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnJhY2UgKyAnXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludGVkVmFsdWVzLm1hcCAoKHgsIGkpID0+IGluZGVudCArIChpc0FycmF5ID8geCA6IChwcmludGVkS2V5c1tpXSArIHgpKSkuam9pbiAoJyxcXG4nKSArICdcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNmZy5pbmRlbnQucmVwZWF0IChjZmcuZGVwdGggLSAxKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kQnJhY2VcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtcyAgID0gZW50cmllcy5tYXAgKGt2ID0+IChpc0FycmF5ID8gJycgOiAocXVvdGVLZXkgKGt2WzBdKSArICc6ICcpKSArIHN0cmluZ2lmeSAoa3ZbMV0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGl0ZW1zLmpvaW4gKCcsICcpXG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICgnWycgICsgY29udGVudCArICAnXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoJ3sgJyArIGNvbnRlbnQgKyAnIH0nKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gc3RyaW5naWZ5XG4gICAgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbmZpZ3VyZSAoe1xuXG4gICAgICAgICAgICAgICAgICAgIGRlcHRoOiAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgcHVyZTogICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAganNvbjogICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAvLyAgY29sb3I6ICAgICAgICAgICBmYWxzZSwgLy8gbm90IHN1cHBvcnRlZCB5ZXRcbiAgICAgICAgICAgICAgICAgICAgbWF4RGVwdGg6ICAgICAgICA1LFxuICAgICAgICAgICAgICAgICAgICBtYXhMZW5ndGg6ICAgICAgIDUwLFxuICAgICAgICAgICAgICAgICAgICBtYXhBcnJheUxlbmd0aDogIDYwLFxuICAgICAgICAgICAgICAgICAgICBtYXhPYmplY3RMZW5ndGg6IDIwMCxcbiAgICAgICAgICAgICAgICAgICAgbWF4U3RyaW5nTGVuZ3RoOiA2MCxcbiAgICAgICAgICAgICAgICAgICAgcHJlY2lzaW9uOiAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBwcmV0dHk6ICAgICAgICAgJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICByaWdodEFsaWduS2V5czogIHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGZhbmN5OiAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50OiAgICAgICAgICcgICAgJyxcbiAgICAgICAgICAgICAgICB9KVxuXG5cbiJdfQ==