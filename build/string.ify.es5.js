"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var O = Object,
    bullet = require('string.bullet'),
    isBrowser = typeof window !== 'undefined' && window.window === window && window.navigator,
    maxOf = function maxOf(arr, pick) {
    return arr.reduce(function (max, s) {
        return Math.max(max, pick ? pick(s) : s);
    }, 0);
},
    isInteger = Number.isInteger || function (value) {
    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
},
    isTypedArray = function isTypedArray(x) {
    return x instanceof Float32Array || x instanceof Float64Array || x instanceof Int8Array || x instanceof Uint8Array || x instanceof Uint8ClampedArray || x instanceof Int16Array || x instanceof Int32Array || x instanceof Uint32Array;
};

var assignProps = function assignProps(to, from) {
    for (var prop in from) {
        O.defineProperty(to, prop, O.getOwnPropertyDescriptor(from, prop));
    };return to;
};

var escapeStr = function escapeStr(x) {
    return x.replace(/\n/g, '\\n').replace(/\'/g, "\\'").replace(/\"/g, '\\"');
};

var _configure = function _configure(cfg) {

    var stringify = function stringify(x) {

        var state = O.assign({ parents: new Set(), siblings: new Map() }, cfg);

        if (cfg.pretty === 'auto') {
            var oneLine = stringify.configure({ pretty: false, siblings: new Map() })(x);
            return oneLine.length <= 60 ? oneLine : stringify.configure({ pretty: true, siblings: new Map() })(x);
        }

        var customFormat = cfg.formatter && cfg.formatter(x, stringify);

        if (typeof customFormat === 'string') {
            return customFormat;
        }

        if (typeof jQuery !== 'undefined' && x instanceof jQuery) {
            x = x.toArray();
        } else if (isTypedArray(x)) {
            x = Array.from(x);
        }

        if (isBrowser && x === window) {
            return 'window';
        } else if (!isBrowser && typeof global !== 'undefined' && x === global) {
            return 'global';
        } else if (x === null) {
            return 'null';
        } else if (x instanceof Date) {
            return state.pure ? x.getTime() : "ðŸ“…  " + x.toString();
        } else if (state.parents.has(x)) {
            return state.pure ? undefined : '<cyclic>';
        } else if (!state.pure && state.siblings.has(x)) {
            return '<ref:' + state.siblings.get(x) + '>';
        } else if (x && typeof Symbol !== 'undefined' && (customFormat = x[Symbol.for('String.ify')]) && typeof customFormat === 'function' && typeof (customFormat = customFormat.call(x, stringify.configure(state))) === 'string') {

            return customFormat;
        } else if (x instanceof Function) {
            return cfg.pure ? x.toString() : x.name ? '<function:' + x.name + '>' : '<function>';
        } else if (typeof x === 'string') {
            return '"' + escapeStr(stringify.limit(x, cfg.pure ? Number.MAX_SAFE_INTEGER : cfg.maxStringLength)) + '"';
        } else if (x instanceof Promise && !state.pure) {
            return '<Promise>';
        } else if ((typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') {

            state.parents.add(x);
            state.siblings.set(x, state.siblings.size);

            var result = stringify.configure(O.assign({}, state, { pretty: state.pretty === false ? false : 'auto', depth: state.depth + 1 })).object(x);

            state.parents.delete(x);

            return result;
        } else if (!isInteger(x) && cfg.precision > 0) {
            return x.toFixed(cfg.precision);
        } else {
            return String(x);
        }
    };

    /*  API  */

    assignProps(stringify, {

        state: cfg,

        configure: function configure(newConfig) {
            return _configure(O.assign({}, cfg, newConfig));
        },

        /*  TODO: generalize generation of these chain-style .configure helpers (maybe in a separate library, as it looks like a common pattern)    */

        get pretty() {
            return stringify.configure({ pretty: true });
        },
        get noPretty() {
            return stringify.configure({ pretty: false });
        },

        get json() {
            return stringify.configure({ json: true, pure: true });
        },
        get pure() {
            return stringify.configure({ pure: true });
        },

        maxStringLength: function maxStringLength() {
            var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.MAX_SAFE_INTEGER;
            return stringify.configure({ maxStringLength: n });
        },
        maxArrayLength: function maxArrayLength() {
            var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.MAX_SAFE_INTEGER;
            return stringify.configure({ maxArrayLength: n });
        },
        maxDepth: function maxDepth() {
            var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.MAX_SAFE_INTEGER;
            return stringify.configure({ maxDepth: n });
        },
        precision: function precision(p) {
            return stringify.configure({ precision: p });
        },
        formatter: function formatter(f) {
            return stringify.configure({ formatter: f });
        },


        /*  Some undocumented internals    */

        limit: function limit(s, n) {
            return s && (s.length <= n ? s : s.substr(0, n - 1) + 'â€¦');
        },

        rightAlign: function rightAlign(strings) {
            var max = maxOf(strings, function (s) {
                return s.length;
            });
            return strings.map(function (s) {
                return ' '.repeat(max - s.length) + s;
            });
        },

        object: function object(x) {

            if (x instanceof Set) {
                x = Array.from(x.values());
            } else if (x instanceof Map) {
                x = Array.from(x.entries());
            }

            var isArray = Array.isArray(x);

            if (isBrowser) {

                if (x instanceof Element) {
                    return '<' + (x.tagName.toLowerCase() + (x.id && '#' + x.id || '') + (x.className && '.' + x.className || '')) + '>';
                } else if (x instanceof Text) {
                    return '@' + stringify.limit(x.wholeText, 20);
                }
            }

            if (!cfg.pure && (cfg.depth > cfg.maxDepth || isArray && x.length > cfg.maxArrayLength)) {
                return isArray ? '<array[' + x.length + ']>' : '<object>';
            }

            var pretty = cfg.pretty ? true : false,
                entries = O.entries(x),
                oneLine = !pretty || entries.length < 2,
                quoteKey = cfg.json ? function (k) {
                return '"' + escapeStr(k) + '"';
            } : function (k) {
                return (/^[A-z][A-z0-9]*$/.test(k) ? k : "'" + escapeStr(k) + "'"
                );
            };

            if (pretty) {

                var values = O.values(x),
                    printedKeys = stringify.rightAlign(O.keys(x).map(function (k) {
                    return quoteKey(k) + ': ';
                })),
                    printedValues = values.map(stringify),
                    leftPaddings = printedValues.map(function (x, i) {
                    return x[0] === '[' || x[0] === '{' ? 3 : typeof values[i] === 'string' ? 1 : 0;
                }),
                    maxLeftPadding = maxOf(leftPaddings),
                    items = leftPaddings.map(function (padding, i) {
                    var value = ' '.repeat(maxLeftPadding - padding) + printedValues[i];
                    return isArray ? value : bullet(printedKeys[i], value);
                }),
                    printed = bullet(isArray ? '[ ' : '{ ', items.join(',\n')),
                    lines = printed.split('\n'),
                    lastLine = lines[lines.length - 1];

                return printed + (' '.repeat(maxOf(lines, function (l) {
                    return l.length;
                }) - lastLine.length) + (isArray ? ' ]' : ' }'));
            } else {

                var _items = entries.map(function (kv) {
                    return (isArray ? '' : quoteKey(kv[0]) + ': ') + stringify(kv[1]);
                }),
                    content = _items.join(', ');

                return isArray ? '[' + content + ']' : '{ ' + content + ' }';
            }
        }
    });

    return stringify;
};

module.exports = _configure({

    depth: 0,
    pure: false,
    json: false,
    //  color:           false, // not supported yet
    maxDepth: 5,
    maxArrayLength: 60,
    maxStringLength: 60,
    precision: undefined,
    formatter: undefined,
    pretty: 'auto'

});

//# sourceMappingURL=data:application/json;base64,